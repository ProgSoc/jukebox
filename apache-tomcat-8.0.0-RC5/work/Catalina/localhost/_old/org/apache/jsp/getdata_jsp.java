/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.0-RC5
 * Generated at: 2013-12-13 05:53:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import raspiejukebox.*;
import java.io.*;
import java.util.List;

public final class getdata_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


String getVolume(){
	try{
		Process proc = Runtime.getRuntime().exec("amixer get PCM");
		BufferedReader stdIn = new BufferedReader(new 
					 InputStreamReader(proc.getInputStream()));
		
		String volume = "";
		String line = null;
		while ((line = stdIn.readLine()) != null && !volume.matches("[0-9]+\\%"))
			volume = line.replaceAll(".*?([0-9]+\\%).*", "$1");
		
		return volume;
	} catch (Exception e) {
		//out.println("<!--IO error occured-->");
		return "00%";
	}
}

String toXml(String s){
	return s.replace("\"", "&quot;").replace("&", "&amp;");
}

void printTrackToXml(TracksDatabase.Track t, Writer outStream) throws IOException{
	outStream.append("<track id=\"");
	outStream.append(Long.toString(t.getID()));
	outStream.append("\">");
	outStream.append("<name>");
	outStream.append(toXml(t.getName()));
	outStream.append("</name>");
	outStream.append("<artist>");
	outStream.append(toXml(t.getArtist()));
	outStream.append("</artist>");
	outStream.append("<album>");
	outStream.append(toXml(t.getAlbum()));
	outStream.append("</album>");
	outStream.append("</track>");
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

JukeBox jb = JukeBox.get();
TracksDatabase tdb = TracksDatabase.get();
String data = request.getParameter("data");

try{
	if (data == null)
		;//Do Nothing
	else if (data.equals("tracks")){

      out.write("<tracks>");

		for (TracksDatabase.Track t: tdb.getTracks())
			printTrackToXml(t, out);

      out.write("</tracks>");

	}
	else if (data.equals("discography")){
		String artistName = request.getParameter("artistname");
		List<TracksDatabase.Track> discography = (artistName == null) ? null : tdb.getTracksByArtist(artistName);
		if (discography != null){
      out.write("\n");
      out.write("\t\t\t<discography artist=\"");
      out.print(artistName);
      out.write('"');
      out.write('>');

			for (TracksDatabase.Track t: discography)
				printTrackToXml(t, out);
			
      out.write("</discography>");

		} else {
      out.write("\n");
      out.write("\t\t\t<discography />\n");
      out.write("\t\t");
}
	}
			
	else if (data.equals("artists"))
		for (String artistName: tdb.getArtists()){
			out.print("<artist>");
			out.print(artistName);
			out.print("</artist>");
		}
		
	else if (data.equals("queue")){
	
      out.write("\t<queue> ");

		for (TracksDatabase.Track t: jb.getQueue())
			printTrackToXml(t, out);
	
      out.write("\t</queue> ");

	}
	
	else if (data.equals("currentstate")){
		
      out.write("<state>");

		TracksDatabase.Track currentTrack = jb.getCurrentTrack();
		if (currentTrack != null) printTrackToXml(currentTrack, out);
		else { //Blank Track
			
      out.write("\n");
      out.write("\t\t\t<track id=\"-1\">\n");
      out.write("\t\t\t\t<name>Nothing!</name>\n");
      out.write("\t\t\t\t<album>--</album>\n");
      out.write("\t\t\t\t<artist>--</artist>\n");
      out.write("\t\t\t</track>\n");
      out.write("\t\t\t");

		}
		
      out.write("<volume>");
      out.print(getVolume());
      out.write("</volume>");

		
      out.write("</state>");

	}
} catch (IOException ioe){
	System.err.println(ioe.getMessage());
}

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
